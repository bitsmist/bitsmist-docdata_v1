====== Store ======

===== 概要 =====

設定情報などを保存するクラスです。階層構造を持つ情報を保存することができます。

===== プロパティ =====

==== items ====

''set'' ''get'' ''Type:Object''

保持しているアイテムのオブジェクトのコピーです。値をセットした場合は、その値で内容が初期化されます。
==== merger ====

''set'' ''get'' ''Type:Function''

merge()メソッドを呼び出してマージする際に使われれる、マージ用の関数を指定します。デフォルトではBitsmistJSのディープマージ用の関数が使用されます。この関数にはマージ先のオブジェクトとマージするオブジェクトが以下のようなイメージで渡されます。

<code javascript>
merger(sourceObject, targetObject); //　targetObjectをsourceObjectにマージします
</code>
===== コンストラクタ =====


==== Constructor(settings) ====

=== 引数 ===

^Parameter^Type^Description^
|settings \\ ''optional''|Object|Storeクラスを初期化する設定情報です。以下のキーがあります。|
|  "items"|Object|itemsプロパティをセットします。|
|  "merger"|Function|mergerプロパティをセットします。|


===== メソッド =====

==== clear() ====

保持しているアイテムを全て削除します。

=== 引数 ===

なし。

=== 戻り値 ===

なし。

==== clone() ====

保持しているアイテムのディープコピーを作成します。

=== 引数 ===

なし。

=== 戻り値 ===

保持しているアイテムのコピーを返します。

==== get(key, defaultValue) ====

keyパラメータで指定された値を返します。指定されたキーが存在しない場合defaultValueを返します。

キーには、ピリオド区切りで複数の階層を指定できます。以下のように指定した場合、store["settings"]["name"]の値が、返されます。

<code javascript>
store.get("settings.name");
</code>

=== 引数 ===

^Parameter^Type^Description^
|key|String|取得するキーを指定します。|
|defaultValue \\ ''optional''|*|キーが存在しない場合に返す値を指定します。|

=== 戻り値 ===

指定されたキーの値です。キーの値が見つからない場合、defalutValueパラメータが指定されていればその値、指定されてない時はundefinedを返します。

==== has(key) ====

指定されたキーが存在するかを返します。

=== 引数 ===

^Parameter^Type^Description^
|key|String|存在を確認したいキーを指定します。|

=== 戻り値 ===

キーが存在する場合はTrue、存在しない場合はFalseを返します。

==== merge(value, merger) ====

現在保持しているアイテムに、引数で渡されたオブジェクトの内容をマージします。

=== 引数 ===

^Parameter^Type^Description^
|value|Object/ \\ Array of objects|マージするオブジェクトを指定します。オブジェクトの配列を渡すこともできます。その場合は、配列内の全てのオブジェクトが順にマージされます。|
|merger \\ ''optional''|Function|マージする際に使用する関数を指定します。指定がない場合は、mergerプロパティにセットされているマージ関数が使用されます。|

=== 戻り値 ===

なし。

==== remove(key) ====

指定されたキーを持つアイテムを削除します。

=== 引数 ===

^Parameter^Type^Description^
|key|String|削除するキーを指定します。|

=== 戻り値 ===

なし。

==== set(key, value) ====

keyパラメータで指定された項目に値をセットします。指定されたキーが存在しない場合は、自動的に作成されます。既にアイテムが存在しかつそれがオブジェクトである場合はマージされます。

キーには、ピリオド区切りで複数の階層を指定できます。以下のように指定した場合、store["settings"]["name"]に値がセットされます。

<code javascript>
store.set("settings.name", "BarHeader");
</code>

途中の階層が存在しない場合は、自動的に作成されます。上記の例の場合、もし”settings”が存在しない場合は、”settings”という階層が、自動的に作成されます。

=== 引数 ===

^Parameter^Type^Description^
|key|String|値をセットするキーを指定します。|
|value|*|セットする値を指定します。|

=== 戻り値 ===

なし。

