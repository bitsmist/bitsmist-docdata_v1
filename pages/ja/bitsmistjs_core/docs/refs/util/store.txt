====== Store ======

===== 概要 =====

設定情報などを保存するクラスです。階層構造を持つ情報を保存することができます。

===== プロパティ =====

==== items ====

''型:Object'' ''get/set''

保持しているアイテムのオブジェクトのコピーです。値をセットした場合は、その値で内容が初期化されます。

==== merger ====

''型:Function'' ''get/set''

[[#merge_value_merger|merge()]]メソッドを呼び出してマージする際に使われれる、マージ用の関数を指定します。デフォルトではBitsmistJSのディープマージ用の関数が使用されます。この関数にはマージ先のオブジェクトとマージするオブジェクトが以下のようなイメージで渡されます。

<code javascript>
merger(sourceObject, targetObject); // targetObjectをsourceObjectにマージします
</code>
===== コンストラクタ =====


==== Constructor(settings) ====

=== パラメータ ===

^パラメータ^型^説明^
|settings|Object|Storeクラスを初期化する設定情報です。以下のキーがあります。|
|  "items"|Object|itemsプロパティをセットします。|
|  "merger"|Function|mergerプロパティをセットします。|


===== メソッド =====

==== clear() ====

''型:undefined''

保持しているアイテムを全て削除します。

=== パラメータ ===

なし。

=== 戻り値 ===

なし。

==== clone() ====

''型:Object''

保持しているアイテムのディープコピーを作成します。

=== パラメータ ===

なし。

=== 戻り値 ===

保持しているアイテムのコピーを返します。

==== get(key, defaultValue) ====

''型:*''

keyパラメータで指定された値を返します。指定されたキーが存在しない場合defaultValueを返します。

キーには、ピリオド区切りで複数の階層を指定できます。以下のように指定した場合、store["settings"]["name"]の値が、返されます。

<code javascript>
store.get("settings.name");
</code>

=== パラメータ ===

^パラメータ^型^説明^
|key \\ ''必須''|String|取得するキーを指定します。|
|defaultValue|*|キーが存在しない場合に返す値を指定します。|

=== 戻り値 ===

指定されたキーの値です。キーの値が見つからない場合、defalutValueパラメータが指定されていればその値、指定されてない時はundefinedを返します。

==== has(key) ====

''型:Boolean''

指定されたキーが存在するかを返します。

=== パラメータ ===

^パラメータ^型^説明^
|key \\ ''必須''|String|存在を確認したいキーを指定します。|

=== 戻り値 ===

キーが存在する場合はTrue、存在しない場合はFalseを返します。

==== merge(newItems, merger) ====

''型:undefined''

現在保持しているアイテムに、引数で渡されたオブジェクトの内容をマージします。

=== パラメータ ===

^パラメータ^型^説明^
|newItems \\ ''必須''|Object/ \\ Array of objects|マージするオブジェクトを指定します。オブジェクトの配列を渡すこともできます。その場合は、配列内の全てのオブジェクトが順にマージされます。|
|merger|Function|マージする際に使用する関数を指定します。指定がない場合は、mergerプロパティにセットされているマージ関数が使用されます。|

=== 戻り値 ===

なし。

==== remove(key) ====

''型:undefined''

指定されたキーを持つアイテムを削除します。

=== パラメータ ===

^パラメータ^型^説明^
|key \\ ''必須''|String|削除するキーを指定します。|

=== 戻り値 ===

なし。

==== set(key, value) ====

''型:undefined''

keyパラメータで指定された項目に値をセットします。指定されたキーが存在しない場合は、自動的に作成されます。既にアイテムが存在しかつそれがオブジェクトである場合はマージされます。

キーには、ピリオド区切りで複数の階層を指定できます。以下のように指定した場合、store["settings"]["name"]に値がセットされます。

<code javascript>
store.set("settings.name", "BarHeader");
</code>

途中の階層が存在しない場合は、自動的に作成されます。上記の例の場合、もし”settings”が存在しない場合は、”settings”という階層が、自動的に作成されます。

=== パラメータ ===

^パラメータ^型^説明^
|key \\ ''必須''|String|値をセットするキーを指定します。|
|value \\ ''必須''|*|セットする値を指定します。|

=== 戻り値 ===

なし。

