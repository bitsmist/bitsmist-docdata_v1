====== LoaderOrganizer ======

''Inherit:Organizer''

=====Overview=====

LoaderOrganizer handles the loading of class files, setting files, and template HTML files. Note actual loading process is handled by loaders and LoaderOrganizer does its job by calling them. 

=====Organizing=====

As a global process, it starts loading files for tags that need to be loaded on the page when all DOMs are loaded.

When it is attached to a component, it loads settings from "molds", and "components" sections and adds components to the parent component. The components in the "molds" section are loaded sequentially in order. LoaderOrganizer starts loading a component and waits for the component to finish loading, then starts loading the next one. After finishing all the components in the "molds" section, it starts loading the "components" section. Unlike the "molds" section, LoaderOrganizer doesn't wait for the previous component to finish loading for the components in the "components" section. It starts loading them one after another and might be resulting in loading out of order, even though they start loading in the order they are in the settings.

===Sections===

  * molds
  * components

===Timings===

  * DOMContentLoaded (Native event)
  * afterStart

=====Settings (Global)=====

<WRAP legend>Syntax:</WRAP>
<code javascript>
{
    "organizers": {
        "LoaderOrganizer": {
            "settings": {
                “autoLoadOnStartup”: <autoLoadOnStartup>
            }
        }
    }
}
</code>

====autoLoadOnStartup====
''Type:Boolean'' ''Default''

Start loading tags on DOMContentLoaded if True.

=====Settings=====

Extra components settings are placed in the "components" or "molds" section.

<WRAP legend>Syntax:</WRAP>
<code javascript>
{
    "molds"/"components": {
        <componentName>: {
            "settings": {
                "autoMorph": <autoMorph>,
                "className": <className>,
                "fileName": <fileName>,
                "loaderName": <loaderName>,
                "overwrite": <overwrite>,
                "path": <path>,
                "rootNode": <rootNode>,
                "splitComponent": <splitComponent>,
                "sync": <sync>,
                "tag": <tag>,
                "tagName": <tagName>,
            }
        }
    },
}
</code>

An object set as the value for <componentName> is setting for an adding component. We only explain the settings valid only for adding a component here, however, any other component settings can be set in the object.

<WRAP legend>Example:</WRAP>
<code javascript>
{
    "molds": {
        "PadSearch": {
            "loadings": {
                "className": "PadSearch"
            }
        }
    },
    "components": {
        "PadSetting": {
            "loadings": {
                "className": "PadSetting"
            }
        }
    }
}
</code>

==== autoMorph ====
''Type:String/Boolean'' ''Default:"BITSMIST.v1.Component"''

Instead of loading class JS files, it uses the specified existing class when instantiating a tag.

====componentName====

''Type:String''

The name of the component. If there is no "className" option in settgins, this value also becomes a class name of the component.


==== className ====
''Type:String'' ''Default:<Component Name>''

A class name of the component. If not specified, the component name is used as the class name.

==== fileName ====
''Type:String'' ''Default:<Class Name>''

A filename of the component. If not specified, the class name is used as the file name.

====loaderName====
''Type:String'' ''Default:"DefaultLoader"''

Specifies a loader name to use. The loader is used to load resources like class js files and template HTML files.

====overwrite====
''Type:Boolean'' ''Default:False''

Specifies whether to overwrite a parent node. If set to True, the parent node will be replaced by the component.

====path====
''Type:String''

Specifies a path of the component files.

==== rootNode ====
''Type:String'' ''Default:<Empty>''

A node to which the component attaches.

==== splitComponent ====
''Type:Boolean'' ''Default:false''

Specifies whether a component file is split. If set to True, the loader will load two files.

==== sync ====
''Type:String/Boolean'' ''Default:false''

If a string is set, it waits for an added component to become the specified state. If set to True, it waits for the “started” state.

==== tag ====
''Type:String'' ''Default:<Empty>''

A tag for the component. This tag is inserted into the document tree as a component. Unlike "tagName", you can specify attributes and classes also.

==== tagName ====
''Type:String'' ''Default:<see desc>''

A tag name of the component. If not specified, it will be generated from the class name. Assuming the class name is a pascal case, the class name is divided into two words from the second capital letter of the class name, then those two words will be concatenated with '-'.

===== Tag Attributes =====

Some component's settings can be specified in tag attributes. Tag attributes have higher priority than settings.

====bm-autoload====

''Type:String''

Indicates to load a component automatically. Specify a URL to the component as the value. If the value is empty the component is loaded using the default paths.

====bm-automorph====

''Type:Boolean''

Indicates to load an HTML file from the default path. No value is needed. Same as [[#automorph|"loadings.autoMorph"]].

====bm-classname====

''Type:String''

A class name of the component. Same as [[#classname|"loadings.className"]].

====bm-path====

''Type:String''

A path that is used for loading components and templates. Same as [[#path|"loadings.path"]].

====bm-settingref====
''Type:String''

A URL to the component setting file. The setting file will be loaded asynchronously.

====bm-settings====
''Type:String''

Settings in JSON format. These settings are merged into the component's settings as if they are placed in the "settings" section.

====bm-split====

''Type:(none)''

Indicates a component file is split. No value is needed. Same as [[#splitcomponent|"loadings.splitComponent"]].


=====Extended Properties=====

==== components ====

''Type:Object'' ''Inject:component'' ''get''

Returns the object holding child components that are added to the component.

=====Extended Methods=====

==== addComponent(componentName, settings, sync) ====

''Type:undefined'' ''Asynchronous'' ''Inject:component''

Adds a child component to the component. The added component instance is added to the [[#components|"components"]] property.

===Parameters===

^Parameter^Type^Description^
|componentName \\ ''Required''|String|A name of the component to add. If no "className" setting in the settings parameter, this value is also used as the class name.|
|settings \\ ''Required''|Object|Component settings.|
|sync \\ ''Default:false''|Object|Whether to return a promise that is resolved after finish loading the component.|

===Return Value===

undefined

===Referencing Settings===

  * [[#classname|loadings.className]]
  * [[#rootnode|loadings.rootNode]]
  * [[#splitcomponent|loadings.splitComponent/system.splitComponent]]
  * [[#sync|loadings.sync]]
  * [[#tag|loadings.tag]]
  * [[#tagname|loadings.tagName]]

====getLoader(loaderName)====
''Type:Function'' ''Inject:Component''

Returns specified loader. If the loader name is not specified, then default loader (DefaultLoader) will be returned.

===Parameters===

^Parameter^Type^Description^
|loaderName \\ ''Default:DefaultLoader''|String|Name of the loader to get.|

===Return Value===

Loader Object

====loadComponent(...args)====
''Type:undefined'' ''Inject:Component'' ''Asynchronous''

Calls current loader's loadComponent() method.

===Parameters===

^Parameter^Type^Description^
|...args|*|Arguments to the loader method.|

===Return Value===

undefined

====loadTag(...args)====
''Type:undefined'' ''Inject:Component'' ''Asynchronous''

Calls current loader's loadTag() method.

===Parameters===

^Parameter^Type^Description^
|...args|*|Arguments to the loader method.|

===Return Value===

undefined
==== loadTags(...args) ====

''Type:undefined'' ''Inject:Component'' ''Asynchronous''

Calls current loader's loadTags() method.

===Parameters===

^Parameter^Type^Description^
|...args|*|Arguments to the loader method.|

===Return Value===

undefined

====loadSetting(...args)====
''Type:undefined'' ''Inject:Component'' ''Asynchronous''

Calls current loader's loadSetting() method.

===Parameters===

^Parameter^Type^Description^
|...args|*|Arguments to the loader method.|

===Return Value===

undefined

====loadSettingFile(...args)====
''Type:undefined'' ''Inject:Component'' ''Asynchronous''

Calls current loader's loadSettingFile() method.

===Parameters===

^Parameter^Type^Description^
|...args|*|Arguments to the loader method.|

===Return Value===

undefined

====loadTemplate(...args)====
''Type:undefined'' ''Inject:Component'' ''Asynchronous''

Calls current loader's loadTemplate() method.

===Parameters===

^Parameter^Type^Description^
|...args|*|Arguments to the loader method.|

===Return Value===

undefined
