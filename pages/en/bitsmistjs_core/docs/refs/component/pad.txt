====== Pad ======

''Inherit:Component''

=====Overview=====

The Pad component is a component that can load HTML files, attach one of them to the component, and display it. It inherits the Component class.

<WRAP admonition note>
On this page, only the difference from the parent class is explained.
</WRAP>

=====Organizers=====

The Pad class attaches organizers below by default.

  * [[en:bitsmistjs_core:docs:refs:organizer:autoload|AutoloadOrganizer]]
  * [[en:bitsmistjs_core:docs:refs:organizer:template|TemplateOrganizer]]

===== Events =====

====beforeOpen====

Triggered when open() method is called.

====doOpen====

Triggered after a beforeOpen event, refresh(), and setup() method is called.

====afterOpen====

Triggered after a doOpen event.

====beforeClose====

Triggered when close() method is called.

====doClose====

Triggered after a befoeClose event.

====afterClose====

Triggered after a doClose event.

====beforeRefresh====

Triggered when refresh() method is called.

====doRefresh====

Triggered after a beforeRefresh and fill() method is called.

====afterRefresh====

Triggered after a doRefresh event.

====afterAppend====

Triggered when switchTemplate() method is called and after a template HTML is attached to a component. Since the Pad class set triggerAppendOnStart setting to false by default, an afterAppend event during the initialization will not be triggered for the Pad component.

=====Methods=====

==== open(options) ====

''Asynchronous''

Opens a pad. When a pad is opened the pad load an HTML file and attaches it to itself. Then call setup() to set up a pad if autoSetup option is True, call refresh() to redraw if autoRefresh option is True.

===Parameters===

^Parameter^Type^Description^
|options  \\ ''Optional''|Object|An object holding options.|

===Return value===

undefined

===Events===

  * beforeOpen
  * doOpen
  * afterOpen

==== openModal(options) ====

''Asynchronous''

Opens a pad modally. Calls open() internally. Refer to [[#open_options|open()]] for details. 

The main difference between open() and openModal() is the promise that is returned by the method. A promise returned by open() is resolved when the handler finished processing, while a promise returned by openModal() is resolved when the pad is closed. That makes you wait for the pad to be closed.

<code javascript>
onBtnOpen_Click(sender, e, ex)
{
    document.querySelector("pad-search").openModal().then((modalResult) => {
        if (modalResult.result)
        {
            console.log("Search word is ", modalResult[""]);
        }
    });
}
</code>

===Return value===

A modal result object.

==== close(options) ====

''Asynchronous''

Closes a pad.

===Parameters===

^Parameter^Type^Description^
|options  \\ ''Optional''|Object|An object holding options.|

===Return value===

undefined

===Events===

  * beforeClose
  * doClose
  * afterClose

==== refresh(options) ====

''Asynchronous''

Redraws a pad. If autoFill option is set to True, fill() method is called during refreshing.

===Parameters===

^Parameter^Type^Description^
|options  \\ ''Optional''|Object|An object holding options.|

===Return value===

undefined

===Events===

  * beforeRefresh
  * doRefresh
  * afterRefresh

==== switchTemplate(templateName, options) ====

''Asynchronous''

Switches to another HTML file to display. If the file is not loaded yet, it will be automatically loaded. The loaded file is attached to the pad.

After the HTML is appended, components inside the HTML will be loaded.

===Parameters===

^Parameter^Type^Description^
|templateName|String|A template name.|
|options  \\ ''Optional''|Object|An object holding options.|

===Return value===

undefined

===Events===

  * afterAppend

==== fill(options) ====

''Asynchronous''

Fills a component with values.

===Parameter===

^Parameter^Type^Description^
|options  \\ ''Optional''|Object|An object holding options.|

===Return value===

undefined
