====== Component ======

''Inherit:HTMLElement''

=====Overview=====

The Component is a core component of the BitsmistJS library. It inherits HTMLElement and can be used just like usual HTML elements in HTML. It is a base component to inherit for your own custom component.

The Component class attaches organizers below by default.

  * [[en:bitsmistjs_core:docs:refs:organizer:organizer|OrganizerOrganizer]]
  * [[en:bitsmistjs_core:docs:refs:organizer:setting|SettingOrganizer]]
  * [[en:bitsmistjs_core:docs:refs:organizer:state|StateOrganizer]]
  * [[en:bitsmistjs_core:docs:refs:organizer:event|EventOrganizer]]
  * [[en:bitsmistjs_core:docs:refs:organizer:loader|LoaderOrganizer]]
  * [[en:bitsmistjs_core:docs:refs:organizer:template|TemplateOrganizer]]

===== Settings =====

The component's settings are placed in the "settings" section.

<WRAP legend>Syntax:</WRAP>
<code javascript>
{
    "settings": {
        "autoFetch": <autoFetch>,
        "autoFill": <autoFill>,
        "autoPostStart": <autoPostStart>,
        "autoRefresh": <autoRefresh>,
        "autoRestart": <autoRestart>,
        "autoSetup": <autoSetup>,
        "autoStop": <autoStop>,
        "hasTemplate": <hasTemplate>,
        "name": <name>,
        "templateName": <templateName>,
        "useGlobalSettings": <useGlobalSettings>,
    },
}
</code>
==== autoFetch ====
''Type:Boolean'' ''Default:true''

When set to True, [[#fetch_options|fetch()]] method will be called automatically inside [[#refresh_options|refresh()]] method.

==== autoFill ====
''Type:Boolean'' ''Default:true''

When set to True, [[#fill_options|fill()]] method will be called automatically inside [[#refresh_options|refresh()]] method.


==== autoPostStart ====
''Type:Boolean'' ''Default:true''

When set to True, the late-stage initialization process will be run automatically. This setting is used to control the flow of the initialization process in the inherited component.

==== autoRefresh ====
''Type:Boolean'' ''Default:true''

When set to True, [[#refresh_options|refresh()]] method will be called automatically after initialization is finished.

==== autoRestart ====
''Type:Boolean'' ''Default:false''

When set to True, [[#start_settings|start()]] method will be called even though the component is already initialized when it is re-attached to the document tree.

==== autoSetup ====
''Type:Boolean'' ''Default:true''

When set to True, [[#setup_options|setup()]] method will be called automatically in the initialization process.

==== autoStop ====
''Type:Boolean'' ''Default:true''

When set to True, [[#stop_options|stop()]] method will be called when the component is detached from the document tree.

==== hasTemplate ====
''Type:Boolean'' ''Default:true''

Specifies whether the component has template HTML files. When set to True, [[#switchtemplate_templatename_options|switchTemplate()]] method will be called in the initialization process to load and insert template HTML in the component.

==== name ====
''Type:String'' ''Default:<Class Name>''

Specifies the component name.

==== templateName ====
''Type:String'' ''Default:<tag name>''

A template name without an extension. The extension ".html" will be appended when retrieving the template files.

==== useGlobalSettings ====
''Type:Boolean'' ''Default:true''

Specifies whether to apply global settings to the component. When set to True, the application global settings will be chained to the component settings.

<WRAP admonition tip links>
The chain of settings is implemented by ChainableStore class.
  * <html><i class="fas fa-link"></i></html>[[en:bitsmistjs_core:docs:refs:util:chainablestore|Reference - Store - ChainableStore]]
</WRAP>

=====Events=====

====afterAppend====

Triggered after a template HTML is attached to a component when [[#switchtemplate_templatename_options|switchTemplate()]] method is called. If the component doesn't have template HTML files ([[#hastemplate|”settings.hasTemplate”]] option is set to False), this event is not triggered.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#switchtemplate_templatename_options|switchTemplate()]] method.|

====afterFetch====

Triggered after doFetch event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#fetch_options|fetch()]] method.|

====afterRefresh====

Triggered after doRefresh event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#refresh_options|refresh()]] method.|

==== afterSetup ====

Triggered after doSetup event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#setup_options|setup()]] method.|

==== afterStart ====

Triggered during the latter stage of a component initialization.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#start_settings|start()]] method.|

==== afterStop ====

Triggered after doStop event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#stop_options|stop()]] method.|

====beforeFetch====

Triggered when [[#fetch_options|fetch()]] method is called.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#fetch_options|fetch()]] method.|

====beforeRefresh====

Triggered when [[#refresh_options|refresh()]] method is called.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#refresh_options|refresh()]] method.|

==== beforeSetup ====

Triggered when [[#setup_options|setup()]] method is called. By default, [[#setup_options|setup()]] is called automatically in the initialization process. If the component has template HTML files, the event will be triggered after the template HTML is attached to the component.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#setup_options|setup()]] method.|

==== beforeStart ====

Triggered when [[#start_settings|start()]] method is called. [[#start_settings|start()]] method is called automatically when the component is attached to to documen tree, in other words, when native connectedCallback() is called.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#start_settings|start()]] method.|

==== beforeStop ====

Triggered when [[#stop_options|stop()]] method is called. By default, [[#stop_options|stop()]] is called automatically when the component is detached from the document tree, in other words, when native disconnectedCallback() is called.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#stop_options|stop()]] method.|

====doFetch====

Triggered after beforeFetch event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#fetch_options|fetch()]] method.|

====doRefresh====

Triggered after doTarget event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#refresh_options|refresh()]] method.|

====doSetup ====

Triggered after beforeSetup event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#setup_options|setup()]] method.|

====doStop ====

Triggered after beforeStop event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#stop_options|stop()]] method.|

====doTarget====

Triggered after beforeRefresh event.

=== Parameters ===

^Parameter^Type^Description^
|options|Object|The options argument passed to [[#refresh_options|refresh()]] method.|

=====Properties=====

==== name ====

''Type:String'' ''Default:<Class Name>'' ''get''

Returns the component name. Can be specified in [[#name|"settings.name"]] setting.

==== rootElement ====

''Type:HTMLElement'' ''Default:this'' ''get''

Returns the root node of the component. By default, it refers to "this", the component itself.

==== uniqueId ====

''Type:String'' ''get''

Returns the automatically created unique id assigned to each component.

===== Methods =====

==== clear(options) ====

''Type:undefined''

Clears a component. It does nothing in the Component base class and you need to override this function.

===Parameters===

^Parameter^Type^Description^
|options|Object|An object holding options.|

===Return Value===

undefined

==== fetch(options) ====

''Type:undefined'' ''Asynchronous''

Fetches data.

===Parameters===

^Parameter^Type^Description^
|options|Object|An object holding options.|

===Return Value===

undefined

===Events===

  * [[#afterfetch|afterFetch]]
  * [[#beforefetch|beforeFetch]]
  * [[#dofetch|doFetch]]


=== Organizer Events ===

  * doFetch

==== fill(options) ====

''Type:undefined''

Fills a component with values. It does nothing in the Component base class and you need to override this function.

===Parameters===

^Parameter^Type^Description^
|options|Object|An object holding options.|

===Return Value===

undefined

==== refresh(options) ====

''Type:undefined'' ''Asynchronous''

Redraws a component. If [[#autofetch|"settings.autoFetch"]] option is set to True then [[#fetch_options|fetch()]] method is called, and if [[#autofill|"settings.autoFill"]] option is set to True then [[#fill_options|fill()]] method is called during refreshing.

Conditional elements (elements that have "bm-visible" attribute) will be shown if the condition matches.

<WRAP admonition tip links>
This is done by calling TemplateOrganizer's showConditionalElements() extended method.
  * <html><i class="fas fa-link"></i></html>[[en:bitsmistjs_core:docs:refs:organizer:template#showconditionalelements_item|Reference - organizer - TemplateOrganizer.showConditionalElements()]]
</WRAP>

===Parameters===

^Parameter^Type^Description^
|options|Object|An object holding options.|

===Return Value===

undefined

===Events===

  * [[#afterrefresh|afterRefresh]]
  * [[#beforerefresh|beforeRefresh]]
  * [[#dorefresh|doRefresh]]
  * [[#dotarget|doTarget]]

===Referencing Settings===

  * [[#autofetch|settings.autoFetch]]
  * [[#autofill|settings.autoFill]]
==== scopedSelectorAll(query) ====

''Type:NodeList''

Returns HTML elements that match the given query under the component.

=== Parameters ===

^Parameter^Type^Description^
|query \\ ''Required''|String|A search query. The query format is same as document.querySelectorAll().|

=== Return Value ===

Node list of HTML elements.


==== setup(options) ====

''Type:undefined'' ''Asynchronous''

Sets up a component. Call it when you changed settings and apply them.

===Parameters===

^Parameter^Type^Description^
|options|Object|An object holding options.|

===Return Value===

undefined

===Events===

  * [[#aftersetup|afterSetup]]
  * [[#beforesetup|beforeSetup]]
  * [[#dosetup|doSetup]]

==== start(settings) ====

''Type:undefined'' ''Asynchronous''

Starts the initialization process of a component. Since it is automatically called when the tag is instantiated, you don't need to call this method explicitly. 

===Parameters===

^Parameter^Type^Description^
|settings|Object|An object holding component settings.|

=== Return Value ===

undefined

===Events===

  * [[#afterstart|afterStart]]
  * [[#beforestart|beforeStart]]

=== Organizer Events ===

  * afterStart
  * beforeStart

===Referencing Settings===

  * [[#automorph|settings.autoMorph]]
  * [[#autopoststart|settings.autoPostStart]]
  * [[#autorefresh|settings.autoRefresh]]
  * [[#autosetup|settings.autoSetup]]
  * [[#hastemplate|settings.hasTemplate]]
  * [[#name|settings.name]]
  * [[#rootelement|settings.rootElement]]

==== stop(options) ====

''Type:undefined'' ''Asynchronous''

Starts the terminating process of a component. Since it is automatically called when the tag is detached from the document tree, you don't need to call this method explicitly.

===Parameters===

^Parameter^Type^Description^
|options|Object|An object holding component settings.|

===Return Value===

undefined

===Events===

  * [[#afterstop|afterStop]]
  * [[#beforestop|beforeStop]]
  * [[#dostop|doStop]]


==== switchTemplate(templateName, options) ====

''Type:undefined'' ''Asynchronous''

Switches to another HTML file to display. If the file is not loaded yet, it will be automatically loaded. The loaded file will be attached to the component, and then components inside the HTML will be loaded.

All the elements with bm-visible attributes are hidden when the template HTML is attached to the node.

<WRAP admonition tip links>
This is done by calling TemplateOrganizer's hideConditionalElements() extended method.
  * <html><i class="fas fa-link"></i></html>[[en:bitsmistjs_core:docs:refs:organizer:template#hideconditionalelements|Reference - organizer - TemplateOrganizer.hideConditionalElements()]]
</WRAP>

Those hidden elements will be shown if the condition match when the component is refreshed (when refresh() method is called).

If [[#autosetup|"settings.autoSetup"]] is set to True, [[#setup_options|setup()]] method will be called after the template HTML file is attached to the component.

===Parameters===

^Parameter^Type^Description^
|templateName \\ ''Required''|String|A template name.|
|options|Object|An object holding options.|

===Return Value===

undefined

===Events===

  * [[#afterappend|afterAppend]]

===Organizer Event===

  * afterAppend

===Referencing Settings===

  * [[#autosetup|settings.autoSetup]]